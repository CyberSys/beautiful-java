#!/bin/bash
set -e
echo

IFS="
"

config_error() {
	echo "${1}"
	echo
	echo "Please follow configuration steps here:"
	echo "https://github.com/quarantin/beautiful-java/#configuring-beautifuljava"
	exit
}

find_path() {

	PATTERN="${1}"
	TARGET="${2}"
	CHECK="${3}"

	DIRPATH="$(grep -i "^${PATTERN}" "${CONFIG}" | cut -f2 -d= | xargs | sed "s|^~|${HOME}|")"

	if [ -z "${DIRPATH}" ]; then
		echo "ERROR: ${TARGET} path missing from config.txt"
		return

	elif ! [ -d "${DIRPATH}" ]; then
		echo "ERROR: ${TARGET} path is invalid: ${DIRPATH}"
		return
	fi

	if [ "${PATTERN}" = intellij ]; then
		EXTRAS=("${INTELLIJ_EXTRA[@]}")

	elif [ "${PATTERN}" = zomboid ]; then
		EXTRAS=("${ZOMBOID_EXTRA[@]}")

	else
		echo "ERROR: This should never happen!"
		return
	fi

	for EXTRA in "${EXTRAS[@]}"; do
		if [ -f "${DIRPATH}/${EXTRA}/${CHECK}" ]; then
			DIRPATH="${DIRPATH}/${EXTRA}"
			break
		fi
	done

	if ! [ -f "${DIRPATH}/${CHECK}" ]; then
		echo "ERROR: ${TARGET} path is invalid: ${DIRPATH}"
		return
	fi

	echo "${DIRPATH}"
}

#
# OS specific
#
OS="$(uname -s)"
if [ "${OS}" = 'Darwin' ]; then
	BSDSED="''"
	FORMATER=format.sh
	INTELLIJ_EXTRA=(''
		'Contents'
	)
	ZOMBOID_EXTRA=(''
		'Project Zomboid.app'
		'Project Zomboid.app/Contents'
		'Project Zomboid.app/Contents/Java'
	)
elif [ "${OS}" = 'Linux' ]; then
	FORMATER=idea.sh
	FORMATER_ARG=format
	INTELLIJ_EXTRA=()
	ZOMBOID_EXTRA=(''
		'projectzomboid'
	)
else
	FORMATER=idea64.exe
	FORMATER_ARG=format
	INTELLIJ_EXTRA=()
	ZOMBOID_EXTRA=()
	OS="$(uname -o)"
fi


#
# Looking for config.txt
#
REPO="$(cd "$(dirname "${0}")"; pwd)"
CONFIG="${REPO}/config.txt"
if ! [ -z "${1}" ]; then
	CONFIG="${1}"
fi

if ! [ -f "${CONFIG}" ]; then
	config_error "ERROR: ${CONFIG} not found"
fi

if [ "${OS}" = 'Msys' ]; then
	sed -i 's/\r//' "${CONFIG}"
	HASBACKSLASH="$(grep -v '^;\|^$' "${CONFIG}" | grep '\\' || true)"
	if ! [ -z "${HASBACKSLASH}" ]; then
		sed -i 's/\\/\//g' "${CONFIG}"
	fi
fi


#
# Looking for IntelliJ install folder
#
INTELLIJ=$(find_path intellij IntelliJ bin/idea.svg)
if ! [ -d "${INTELLIJ}" ]; then
	config_error "${INTELLIJ}"
fi

#
# Looking for Zomboid install folder
#
ZOMBOID=$(find_path zomboid Zomboid zombie/core/Core.class)
if ! [ -d "${ZOMBOID}" ]; then
	config_error "${ZOMBOID}"
fi

#
# Looking for Java
#
JAVA="$(grep -i ^java "${CONFIG}" | cut -f2 -d= | xargs | sed "s|^~|${HOME}|")"
if ! [ -f "${JAVA}" ]; then
	JAVA="${INTELLIJ}/jbr/bin/java"
	if ! [ -f "${JAVA}" ]; then
		JAVA="${INTELLIJ}/jbr/Contents/Home/bin/java"
		if ! [ -f "${JAVA}" ]; then
			echo "ERROR: java interpreter not found."
			config_error
		fi
	fi
fi


#
# Looking for Zomboid version
#
echo "* Retrieving Zomboid version..."
OUTDIR="$(pwd)/sources"
mkdir -p "${OUTDIR}"
cp "${ZOMBOID}/zombie/core/Core.class" "${OUTDIR}"
DECOMPILER="${INTELLIJ}/plugins/java-decompiler/lib/java-decompiler.jar"
MAIN=org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler
"${JAVA}" -cp "${DECOMPILER}" "${MAIN}" "${OUTDIR}/Core.class" "${OUTDIR}" > /dev/null
VERSION="$(grep -o 'new GameVersion(.*' "${OUTDIR}/Core.java" | cut -f2 -d'(' | cut -f1,2 -d',' | sed 's/, /./')"
if [ -z "${VERSION}" ]; then
	VERSION="$(grep 'versionNumber =' "${OUTDIR}/Core.java" | cut -f2 -d= | cut -f2 -d'"')"
fi

rm -f "${OUTDIR}/Core.class" "${OUTDIR}/Core.java"

if [ -z "${VERSION}" ]; then
	echo "* No version found."
	rm -rf "${OUTDIR}/zombie/"
else
	echo "* Found version ${VERSION}"
	OUTDIR="${OUTDIR}/${VERSION}"
	rm -rf "${OUTDIR}/"
	mkdir -p "${OUTDIR}"
fi

#
# Do the work
#
echo "* Copying class files..."
cp -r "${ZOMBOID}/zombie" "${OUTDIR}"


echo "* Decompiling class files..."
"${JAVA}" -cp "${DECOMPILER}" "${MAIN}" "${OUTDIR}" "${OUTDIR}"


echo "* Deleting class files..."
find "${OUTDIR}" -name '*.class' -exec rm -f {} \; > /dev/null


echo "* Restoring missing symbols..."
while read FILE; do

	echo "Fixing symbols ${FILE}"

	sed -i ${BSDSED} \
		-e 's/<invokedynamic>//g' \
		-e 's/(Object\[\])(\("ID",.*\)));/(Object[])new Object[]{\1});/g' \
		-e 's/(Object\[\])(\(.*\)))\[/(Object[])new Object[]{\1})[/g' \
		-e '/1.0F.*getPerkLevel(PerkFactory.Perks.Aiming).*15\.0F/d' \
		"${FILE}"

	"${JAVA}" -cp "${REPO}/classes" beautifuljava.BeautifulJava "${FILE}"

done < <(find "${OUTDIR}" -type f -name '*.java')


echo "* Formating source files..."
"${INTELLIJ}/bin/${FORMATER}" ${FORMATER_ARG} -r -s "${REPO}/formatter.xml" "${OUTDIR}"
