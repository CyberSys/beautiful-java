#!/bin/bash
set -e
IFS="
"

JQ=$(which jq)
if [ -z "${JQ}" ] || ! [ -f "${JQ}" ]; then
	echo "You have to install jq. It can be downloaded from here: https://stedolan.github.io/jq/download/"
	exit
fi

OUTDIR="$(pwd)/sources"
rm -rf "${OUTDIR}/zombie/"
mkdir -p "${OUTDIR}"

cd $(dirname "${0}")
REPO="$(dirname "${0}")"
CONFIG="${REPO}/config.json"
if ! [ -z "${1}" ]; then
	CONFIG="${1}"

elif ! [ -f "${CONFIG}" ]; then
	echo -e "No config.json found.\nPlease copy config.json.example to config.json and edit the file according to your setup."
	exit
fi

INTELLIJ="$(jq -r .intellij "${CONFIG}" | sed "s|^~|${HOME}|" | tr '\\' '/')"
if [ -z "${INTELLIJ}" ]; then
	echo "ERROR: intellij path missing from config.json"
	exit

elif ! [ -f "${INTELLIJ}" ]; then
	echo "ERROR: Path to IntelliJ is invalid: ${INTELLIJ}"
	exit
fi

JAVA="$(jq -r .java "${CONFIG}" | sed "s|^~|${HOME}|" | tr '\\' '/')"
if ! [ -f "${JAVA}" ]; then
	JAVA="$(dirname $(dirname "${INTELLIJ}"))/jbr/bin/java"
	if ! [ -f ]; then
		echo "ERROR: java interpreter not found."
		echo "You can add it to config.json, for example: \"java\": \"/path/to/java\""
		exit
	fi
fi

ZOMBOID="$(jq -r .zomboid "${CONFIG}" | sed "s|^~|${HOME}|" | tr '\\' '/')"
if [ -z "${ZOMBOID}" ]; then
	echo "ERROR: zomboid path missing from config.json"
	exit

elif ! [ -f "${ZOMBOID}" ]; then
	echo "ERROR: Path to Zomboid is invalid: ${ZOMBOID}"
	exit
fi


echo "Copying class files..."
ZOMBOID="$(dirname "${ZOMBOID}")"
cd "${ZOMBOID}"
cp -r zombie "${OUTDIR}"


echo "Decompiling class files..."
cd "${OUTDIR}"
DECOMPILER="$(dirname $(dirname "${INTELLIJ}"))/plugins/java-decompiler/lib/java-decompiler.jar"
MAIN=org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler
"${JAVA}" -cp "${DECOMPILER}" "${MAIN}" . .


echo "Deleting class files..."
find . -name '*.class' -exec rm -f {} \; > /dev/null


echo "Restoring missing symbols..."
cd "${OUTDIR}"
while read FILE; do

	echo "Fixing symbols sources/$(echo ${FILE} | sed 's/^..//')"

	OUT="$(echo "${FILE}" | sed 's/\.java$/.clean.java/')"

	sed -i \
		-e 's/<invokedynamic>//g' \
		-e 's/(Object\[\])(\("ID",.*\)));/(Object[])new Object[]{\1});/g' \
		-e 's/(Object\[\])(\(.*\)))\[/(Object[])new Object[]{\1})[/g' \
		-e '/1.0F.*getPerkLevel(PerkFactory.Perks.Aiming).*15\.0F/d' \
		"${FILE}"

	"${JAVA}" -cp "${REPO}/classes" beautifuljava.BeautifulJava "${FILE}" > "${OUT}"
	if [ "${?}" -eq "0" ]; then
		mv "${OUT}" "${FILE}"
	fi

done < <(find . -type f -name '*.java')


echo "Indenting source files..."
cd "${OUTDIR}"
"${INTELLIJ}" format -r -s "${REPO}/formatter.xml" .
