#!/bin/bash
set -e
echo

IFS="
"

config_error() {
	echo
	echo "Please follow configuration steps here:"
	echo "https://github.com/quarantin/beautiful-java/#configuring-beautifuljava"
	exit
}

if [ "$(uname -s)" = 'Darwin' ]; then
	BSDSED="''"
else
	FORMAT=format
fi

REPO="$(cd "$(dirname "${0}")"; pwd)"
CONFIG="${REPO}/config.txt"
if ! [ -z "${1}" ]; then
	CONFIG="${1}"
fi

if ! [ -f "${CONFIG}" ]; then
	echo "ERROR: ${CONFIG} not found"
	config_error
fi

if [ "$(uname -o)" = 'Msys' ]; then
	sed -i 's/\r//' "${CONFIG}"
	HASBACKSLASH="$(grep -v '^;\|^$' "${CONFIG}" | grep '\\' || true)"
	if ! [ -z "${HASBACKSLASH}" ]; then
		sed -i 's/\\/\//g' "${CONFIG}"
	fi
fi

INTELLIJ="$(grep -i ^intellij "${CONFIG}" | cut -f2 -d= | xargs | sed "s|^~|${HOME}|")"
if [ -z "${INTELLIJ}" ]; then
	echo "ERROR: IntelliJ path missing from config.txt"
	config_error

elif ! [ -f "${INTELLIJ}" ]; then
	echo "ERROR: IntelliJ path is invalid: ${INTELLIJ}"
	config_error
fi

ZOMBOID="$(grep -i ^zomboid "${CONFIG}" | cut -f2 -d= | xargs | sed "s|^~|${HOME}|")"
if [ -z "${ZOMBOID}" ]; then
	echo "ERROR: Zomboid path missing from config.txt"
	config_error

elif ! [ -d "${ZOMBOID}" ]; then
	echo "ERROR: Path to Zomboid is invalid: ${ZOMBOID}"
	config_error

elif ! [ -f "${ZOMBOID}/zombie/core/Core.class" ]; then
	echo "ERROR: Path to Zomboid is invalid: ${ZOMBOID}"
	config_error
fi

JAVA="$(grep -i ^java "${CONFIG}" | cut -f2 -d= | xargs | sed "s|^~|${HOME}|")"
if ! [ -f "${JAVA}" ]; then
	JAVA="$(dirname "$(dirname "${INTELLIJ}")")/jbr/bin/java"
	if ! [ -f "${JAVA}" ]; then
		JAVA="$(dirname "$(dirname "${INTELLIJ}")")/jbr/Contents/Home/bin/java"
		if ! [ -f "${JAVA}" ]; then
			echo "ERROR: java interpreter not found."
			echo
			exit
		fi
	fi
fi

DECOMPILER="$(dirname "$(dirname "${INTELLIJ}")")/plugins/java-decompiler/lib/java-decompiler.jar"
MAIN=org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler
OUTDIR="$(pwd)/sources"
mkdir -p "${OUTDIR}"


echo "* Retrieving Zomboid version..."
cp "${ZOMBOID}/zombie/core/Core.class" "${OUTDIR}"
cd "${OUTDIR}"
"${JAVA}" -cp "${DECOMPILER}" "${MAIN}" . . > /dev/null
VERSION="$(grep -o 'new GameVersion(.*' Core.java | cut -f2 -d'(' | cut -f1,2 -d',' | sed 's/, /./')"
if [ -z "${VERSION}" ]; then
	VERSION="$(grep 'versionNumber =' Core.java | cut -f2 -d= | cut -f2 -d'"')"
fi

rm -f "${OUTDIR}/Core.class" "${OUTDIR}/Core.java"

if [ -z "${VERSION}" ]; then
	echo "* No version found."
	rm -rf "${OUTDIR}/zombie/"
else
	echo "* Found version ${VERSION}"
	OUTDIR="${OUTDIR}/${VERSION}"
	rm -rf "${OUTDIR}/"
	mkdir -p "${OUTDIR}"
fi


echo "* Copying class files..."
cp -r "${ZOMBOID}/zombie" "${OUTDIR}"


echo "* Decompiling class files..."
"${JAVA}" -cp "${DECOMPILER}" "${MAIN}" "${OUTDIR}" "${OUTDIR}"


echo "* Deleting class files..."
find "${OUTDIR}" -name '*.class' -exec rm -f {} \; > /dev/null


echo "* Restoring missing symbols..."
while read FILE; do

	echo "Fixing symbols ${FILE}"

	sed -i ${BSDSED} \
		-e 's/<invokedynamic>//g' \
		-e 's/(Object\[\])(\("ID",.*\)));/(Object[])new Object[]{\1});/g' \
		-e 's/(Object\[\])(\(.*\)))\[/(Object[])new Object[]{\1})[/g' \
		-e '/1.0F.*getPerkLevel(PerkFactory.Perks.Aiming).*15\.0F/d' \
		"${FILE}"

	"${JAVA}" -cp "${REPO}/classes" beautifuljava.BeautifulJava "${FILE}"

done < <(find "${OUTDIR}" -type f -name '*.java')


echo "* Formating source files..."
"${INTELLIJ}" ${FORMAT} -r -s "${REPO}/formatter.xml" "${OUTDIR}"
