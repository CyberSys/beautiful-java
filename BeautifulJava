#!/bin/bash
set -e

IFS="
"

JQ="$(which jq)"
if ! [ -f "${JQ}" ]; then
	JQ="$(which jq-win64.exe)"
	if ! [ -f "${JQ}" ]; then
		echo "You have to install jq. It can be downloaded from here: https://stedolan.github.io/jq/download/"
		exit
	fi
fi

REPO="$(cd "$(dirname "${0}")"; pwd)"
CONFIG="${REPO}/config.json"
if ! [ -z "${1}" ]; then
	CONFIG="${1}"
fi

if ! [ -f "${CONFIG}" ]; then
	echo -e "${CONFIG} not found.\nPlease copy config.json.example to config.json and edit the file according to your setup."
	exit
fi

HASBACKSLASH="$(grep '\\' "${CONFIG}" | grep -v '/' || true)"
if ! [ -z "${HASBACKSLASH}" ]; then
	sed -ibak 's/\\/\//g' "${CONFIG}"
fi

INTELLIJ="$("${JQ}" -r .intellij "${CONFIG}" | sed "s|^~|${HOME}|" | tr '\\' '/')"
if [ -z "${INTELLIJ}" ]; then
	echo "ERROR: intellij path missing from config.json"
	exit

elif ! [ -f "${INTELLIJ}" ]; then
	echo "ERROR: Path to IntelliJ is invalid: ${INTELLIJ}"
	exit
fi

JAVA="$("${JQ}" -r .java "${CONFIG}" | sed "s|^~|${HOME}|" | tr '\\' '/')"
if ! [ -f "${JAVA}" ]; then
	JAVA="$(dirname "$(dirname "${INTELLIJ}")")/jbr/bin/java"
	if ! [ -f "${JAVA}" ]; then
		JAVA="$(dirname "$(dirname "${INTELLIJ}")")/jbr/Contents/Home/bin/java"
		if ! [ -f "${JAVA}" ]; then
			echo "ERROR: java interpreter not found."
			exit
		fi
	fi
fi

ZOMBOID="$("${JQ}" -r .zomboid "${CONFIG}" | sed "s|^~|${HOME}|" | tr '\\' '/')"
if [ -z "${ZOMBOID}" ]; then
	echo "ERROR: zomboid path missing from config.json"
	exit

elif ! [ -f "${ZOMBOID}" ]; then
	echo "ERROR: Path to Zomboid is invalid: ${ZOMBOID}"
	exit
fi

ZOMBOID="$(dirname "${ZOMBOID}")"
DECOMPILER="$(dirname "$(dirname "${INTELLIJ}")")/plugins/java-decompiler/lib/java-decompiler.jar"
MAIN=org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler
OUTDIR="$(pwd)/sources"
mkdir -p "${OUTDIR}"


echo "Getting Zomboid version..."
cp "${ZOMBOID}/zombie/core/Core.class" "${OUTDIR}"
cd "${OUTDIR}"
"${JAVA}" -cp "${DECOMPILER}" "${MAIN}" . . > /dev/null
VERSION="$(grep -o 'new GameVersion(.*' Core.java | cut -f2 -d'(' | cut -f1,2 -d',' | sed 's/, /./')"
if [ -z "${VERSION}" ]; then
	VERSION="$(grep 'versionNumber =' Core.java | cut -f2 -d= | cut -f2 -d'"')"
fi
rm -f Core.class Core.java
if [ -z "${VERSION}" ]; then
	rm -rf "${OUTDIR}/zombie/"
else
	OUTDIR="${OUTDIR}/${VERSION}"
	rm -rf "${OUTDIR}/"
	mkdir -p "${OUTDIR}"
fi


echo "Copying class files..."
cp -r "${ZOMBOID}/zombie" "${OUTDIR}"


echo "Decompiling class files..."
"${JAVA}" -cp "${DECOMPILER}" "${MAIN}" "${OUTDIR}" "${OUTDIR}"


echo "Deleting class files..."
find "${OUTDIR}" -name '*.class' -exec rm -f {} \; > /dev/null

echo "Restoring missing symbols..."
while read FILE; do

	echo "Fixing symbols ${FILE}"

	OUT="$(echo "${FILE}" | sed 's/\.java$/.clean.java/')"

	sed -ibak \
		-e 's/<invokedynamic>//g' \
		-e 's/(Object\[\])(\("ID",.*\)));/(Object[])new Object[]{\1});/g' \
		-e 's/(Object\[\])(\(.*\)))\[/(Object[])new Object[]{\1})[/g' \
		-e '/1.0F.*getPerkLevel(PerkFactory.Perks.Aiming).*15\.0F/d' \
		"${FILE}"

	"${JAVA}" -cp "${REPO}/classes" beautifuljava.BeautifulJava "${FILE}" > "${OUT}"
	if [ "${?}" -eq "0" ]; then
		mv "${OUT}" "${FILE}"
	fi

done < <(find "${OUTDIR}" -type f -name '*.java')


echo "Indenting source files..."
if [[ "${INTELLIJ}" != *"format.sh" ]]; then
	FORMAT=format
fi
"${INTELLIJ}" ${FORMAT} -r -s "${REPO}/formatter.xml" "${OUTDIR}"
